%-----------------------------------------------------------------------------------------------------------------------
%-- Variance_analysis.m -- Analysis of means and variances for different time windows
%--	TU, 12/28/01
%-----------------------------------------------------------------------------------------------------------------------
function Variance_analysis(data, Protocol, Analysis, SpikeChan, StartCode, StopCode, BegTrial, EndTrial, StartOffset, StopOffset, PATH, FILE);

TEMPO_Defs;		
Path_Defs;
ProtocolDefs;	%needed for all protocol specific functions - contains keywords - BJP 1/4/01

%get the column of values of horiz. disparities in the dots_params matrix
h_disp = data.dots_params(DOTS_HDISP,:,PATCH1);
unique_hdisp = munique(h_disp');

%get the binocular correlations
binoc_corr = data.dots_params(DOTS_BIN_CORR, :, PATCH1);
unique_bin_corr = munique(binoc_corr');

%now, get the firing rates for all the trials 
spike_rates = data.spike_rates(SpikeChan, :);

%get indices of any NULL conditions (for measuring spontaneous activity
null_trials = logical( (binoc_corr == data.one_time_params(NULL_VALUE)) );

%now, select trials that fall between BegTrial and EndTrial
trials = 1:length(binoc_corr);		% a vector of trial indices
select_trials = ( (trials >= BegTrial) & (trials <= EndTrial) );

%[h_disp' binoc_corr' spike_rates' null_trials' select_trials']

Pref_HDisp = data.one_time_params(PREFERRED_HDISP);

%get trial lengths in seconds
trial_length = ((find(data.event_data(:,:,:)==StopCode)) - (find(data.event_data(:,:,:)==StartCode)))'/1000;

%get the random seed for each trial of the Patch1 dots
%check to see if there is a fixed seed and store this for later if there is.
if (size(data.dots_params,1) >= DOTS_BIN_CORR_SEED)  %for backwards compatibility with old files that lack this
    seeds = data.dots_params(DOTS_BIN_CORR_SEED, :, PATCH1);
    select_fixed_seeds = logical(seeds == data.one_time_params(FIXED_SEED));
else 
    select_fixed_seeds = [];
end
if (sum(select_fixed_seeds) >= 1)
    fixed_seed = data.one_time_params(FIXED_SEED);
else
    fixed_seed = NaN;
end

%now, determine the choice that was made for each trial, PREFERRED or NULL
%by definition, a preferred choice will be made to Target1 and a null choice to Target 2
%thus, look for the events IN_T1_WIN_CD and IN_T2_WIN_CD.  GCD, 5/30/2000
num_trials = length(binoc_corr);
PREFERRED = 1;
NULL = 2;
for i=1:num_trials
    temp = data.event_data(1,:,i);
    events = temp(temp>0);  % all non-zero entries
    if (sum(events == IN_T1_WIN_CD) > 0)
        choice(i) = PREFERRED;
    elseif (sum(events == IN_T2_WIN_CD) > 0)
        choice(i) = NULL;
    else
        disp('Neither T1 or T2 chosen.  This should not happen!.  File must be bogus.');
    end        
end


%calculate mean and variance for each correlation, choice and NOVAR and VAR conditions separately. TU 1/25/02
for i = 1:length(unique_bin_corr) 
    for j = 1:length(unique_hdisp)
        if (i == 1)
            if (isnan(fixed_seed) == 0)
                novar_trials = ( (h_disp == Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );
                var_trials = ( (h_disp ~= Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );  
                
                novar_mean = mean(spike_rates(novar_trials & select_trials).*trial_length(novar_trials & select_trials));
                novar_var = var(spike_rates(novar_trials & select_trials).*trial_length(novar_trials & select_trials));
                var_mean = mean(spike_rates(var_trials & select_trials).*trial_length(var_trials & select_trials));
                var_var = var(spike_rates(var_trials & select_trials).*trial_length(var_trials & select_trials));
                
                pref_novar_mean = mean(spike_rates((choice == PREFERRED) & novar_trials & select_trials).*trial_length((choice == PREFERRED) & novar_trials & select_trials));
                pref_novar_var = var(spike_rates((choice == PREFERRED) & novar_trials & select_trials).*trial_length((choice == PREFERRED) & novar_trials & select_trials));
                null_novar_mean = mean(spike_rates((choice == NULL) & novar_trials & select_trials).*trial_length((choice == NULL) & novar_trials & select_trials));
                null_novar_var = var(spike_rates((choice == NULL) & novar_trials & select_trials).*trial_length((choice == NULL) & novar_trials & select_trials));
                pref_var_mean = mean(spike_rates((choice == PREFERRED) & var_trials & select_trials).*trial_length((choice == PREFERRED) & var_trials & select_trials));
                pref_var_var = var(spike_rates((choice == PREFERRED) & var_trials & select_trials).*trial_length((choice == PREFERRED) & var_trials & select_trials));
                null_var_mean = mean(spike_rates((choice == NULL) & var_trials & select_trials).*trial_length((choice == NULL) & var_trials & select_trials));
                null_var_var = var(spike_rates((choice == NULL) & var_trials & select_trials).*trial_length((choice == NULL) & var_trials & select_trials));
            end
        end
        all_choices = ( (binoc_corr == unique_bin_corr(i)) & (h_disp == unique_hdisp(j)) );
        all_mean(i,j) = mean(spike_rates(all_choices & select_trials).*trial_length(all_choices & select_trials));
        all_var(i,j) = var(spike_rates(all_choices & select_trials).*trial_length(all_choices & select_trials));
        
        pref_choices = ( (choice == PREFERRED) & (binoc_corr == unique_bin_corr(i)) & (h_disp == unique_hdisp(j)) );
        if (sum(pref_choices) > 1) 
            pref_mean(i,j) = mean(spike_rates(pref_choices & select_trials).*trial_length(pref_choices & select_trials));
            pref_var(i,j) = var(spike_rates(pref_choices & select_trials).*trial_length(pref_choices & select_trials));
        end
        
        null_choices = ( (choice == NULL) & (binoc_corr == unique_bin_corr(i)) & (h_disp == unique_hdisp(j)) );
        if (sum(null_choices) > 1) 
            null_mean(i,j) = mean(spike_rates(null_choices & select_trials).*trial_length(null_choices & select_trials));
            null_var(i,j) = var(spike_rates(null_choices & select_trials).*trial_length(null_choices & select_trials));
        end
        choice_bias(i,j) = max(length(find(pref_choices)), length(find(null_choices))) / length(find(all_choices));
    end
end


%Regress choice bias against VMR.
%First, calculate slope for VMRs from all choice.
vmr_temp = all_var./all_mean;
vmr_temp = [vmr_temp(:,1); vmr_temp(:,2)];
choice_bias_temp = [choice_bias(:,1); choice_bias(:,2)];
%add a column of ones to yfit to make regress happy        
choice_bias_temp = [ones(length(choice_bias_temp),1) choice_bias_temp];
vmr_temp = log10(vmr_temp);
[b, bint, r, rint, stats] = regress(vmr_temp, choice_bias_temp);
ChoiceBias_VMR_all_slope = b(2);
ChoiceBias_VMR_all_Rsq = stats(1);
ChoiceBias_VMR_all_P = stats(3);

%calculate slope for VMRs from each choice.
vmr_pref_temp = pref_var./pref_mean;
vmr_null_temp = null_var./null_mean;
vmr_temp = [vmr_pref_temp(:,1); vmr_pref_temp(:,2); vmr_null_temp(:,1); vmr_null_temp(:,2)];
choice_bias_temp = [choice_bias(:,1); choice_bias(:,2); choice_bias(:,1); choice_bias(:,2)];
%add a column of ones to yfit to make regress happy        
choice_bias_temp = [ones(length(choice_bias_temp),1) choice_bias_temp];
vmr_temp = log10(vmr_temp);
[b, bint, r, rint, stats] = regress(vmr_temp, choice_bias_temp);
ChoiceBias_VMR_choice_slope = b(2);
ChoiceBias_VMR_choice_Rsq = stats(1);
ChoiceBias_VMR_choice_P = stats(3);


%Now calculate variance to mean ratios for different time windows.
figure;
set(gcf,'PaperPosition', [.2 .2 8 10.7], 'Position', [250 50 500 573], 'Name', 'Variance analysis');

start_offset = 100;  % starting time, ms
window_size = 200 ; % window size, ms
start_time = start_offset: window_size: 1500-window_size; 
Z_Spikes = [];
for j = 1:length(start_time) %calculate spike rates for different time windows
    spike_rates = ComputeSpikeRates(data, length(h_disp), StartCode, StartCode, start_time(j)+30, start_time(j)+window_size+30);
    spike_rates = spike_rates(1,:);

    mean_dist = []; var_dist = []; k = 1;
    for i=1:length(unique_bin_corr)%loop through each binocular correlation levels, and calculate spike count and variance
        pref_dist = []; null_dist = [];
        pref_trials = ( (h_disp == Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );    
        pref_dist = spike_rates(pref_trials & select_trials)*window_size/1000;
        null_trials = ( (h_disp ~= Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );    
        null_dist = spike_rates(null_trials & select_trials)*window_size/1000;
        
        %calculate spike count and variances for NOVAR and VAR conditions
        %separetely. Then calculate noise correlation over time 12/04/02 TU
        if (i == 1)
            if (isnan(fixed_seed) == 0)
                nov_trials = ( (h_disp == Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );
                v_trials = ( (h_disp ~= Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );  
                
                nov_dist(j,:) = spike_rates(novar_trials & select_trials)*window_size/1000;
                v_dist(j,:) = spike_rates(var_trials & select_trials)*window_size/1000;
                
                if (j ~= 1)
                    %calculate noise correlation between neighboring time bins
                    r = corrcoef(nov_dist(j-1,:),nov_dist(j,:));
                    nov_noise_corr(j-1) = r(1,2);
                    r = corrcoef(v_dist(j-1,:),v_dist(j,:));
                    v_noise_corr(j-1) = r(1,2);
                end
            end
        end
        
        if (sum(pref_dist) ~= 0)
            mean_dist(k) = mean(pref_dist);
            var_dist(k) = var(pref_dist);
            k = k + 1;
            
            %Z-score each trial
            Z_Spikes(j, pref_trials & select_trials) = (pref_dist - mean(pref_dist))/std(pref_dist);
        end
        if (sum(null_dist) ~= 0)
            mean_dist(k) = mean(null_dist);
            var_dist(k) = var(null_dist);
            k = k + 1;
            
            %Z-score each trial
            Z_Spikes(j, null_trials & select_trials) = (null_dist - mean(null_dist))/std(null_dist);
        end
    end
    
    %fit with a linear finction constraining the slope to 1
    fixed_param_flags = zeros(2,1); %by default, all 2 parameters will vary
    fixed_param_values = zeros(2,1); %override these values and flags to fix a parameter    
    fixed_param_flags(2) = 1; %fix the slope of the curve
    fixed_param_values(2) = 1; %fix the slope to 1

    if ~isempty(mean_dist)
        means = [log10(mean_dist') log10(var_dist')];
        [pars{j}] = linearfit(means,fixed_param_flags,fixed_param_values);
    
        %add a column of ones to yfit to make regress happy
%       mean_temp = [ones(length(mean_dist),1) log10(mean_dist')];
%       var_temp = log10(var_dist');
%       [b{j}, bint, r{j}, rint, stats{j}] = regress(var_temp, mean_temp);
    
        x_interp = (min(mean_dist): .01 : max(mean_dist));
        x_temp = [ones(length(x_interp), 1)  log10(x_interp')];
%        y_fit = 10.^(x_temp*b{j});
        y_fit = 10.^(x_temp*pars{j});
        var_mean_ratio(j) = 10^pars{j}(1);
    else
        var_mean_ratio(j) = NaN;
    end
    
    subplot(4, 2, j);
    hold on;
    plot(mean_dist, var_dist, 'ko', 'MarkerFaceColor', 'k');
    plot(x_interp, y_fit, 'k-');
    hold off;
    %comment out the next 2 lines if you want the plot to be on a LINEAR axis
    set(gca, 'YScale', 'log');
    set(gca, 'XScale', 'log');
    xlabel('Spike Count');
    ylabel('Variance');
    
    if (j ~= 1)
        %calculate noise correlation between neiboring time bins
        r = corrcoef(Z_Spikes(j-1,:),Z_Spikes(j,:));
        noise_corr(j-1) = r(1,2);
    end
end


%Calculate noise correlation matrix for VAR, NOVAR and Zscored conditions TU 05/05/03
if (isnan(fixed_seed) == 0)
    v_r = corrcoef(v_dist');
    n_r = corrcoef(nov_dist');
    average_var_noise_corr = nanmean((nansum(v_r)-1)/(length(v_r)-1));
    average_novar_noise_corr = nanmean((nansum(n_r)-1)/(length(n_r)-1));
    for k=1:(length(v_r)-1)
        var_noise_corr(k) = nanmean(diag(v_r,k));
        novar_noise_corr(k) = nanmean(diag(n_r,k));
    end
end
r = corrcoef(Z_Spikes');
average_noise_corr = nanmean((nansum(r)-1)/(length(r)-1));
for k=1:(length(r)-1)
    Z_noise_corr(k) = nanmean(diag(r,k));
end


%Now calculate the time course of firing for the highest correlation level.
figure;
set(gcf,'PaperPosition', [.2 .2 8 10.7], 'Position', [250 50 500 573], 'Name', 'Time course of firing');

start_offset2 = 0;  % starting time, ms
window_size2 = 20 ; % window size, ms
start_time2 = start_offset2: window_size2: 1500-window_size2; 
for j = 1:length(start_time2) %calculate spike rates for different time windows
    spike_rates = ComputeSpikeRates(data, length(h_disp), StartCode, StartCode, start_time2(j)+30, start_time2(j)+window_size2+30);
    spike_rates = spike_rates(1,:);

    mean_dist = []; var_dist = [];
    for i=length(unique_bin_corr)-3:length(unique_bin_corr)%keep this so that I can loop through each binocular correlation levels
        pref_dist = []; null_dist = [];
        pref_trials = ( (h_disp == Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );    
        pref_dist = spike_rates(pref_trials & select_trials);
        null_trials = ( (h_disp ~= Pref_HDisp) & (binoc_corr == unique_bin_corr(i)) );    
        null_dist = spike_rates(null_trials & select_trials);
        
        mean_pref(j,i) = mean(pref_dist);
        sem_pref(j,i) = std(pref_dist) / sqrt(sum(pref_trials));
        mean_null(j,i) = mean(null_dist);
        sem_null(j,i) = std(null_dist) / sqrt(sum(null_trials));
    end
end

bin_center = start_time2 + (window_size2/2);


%Calculate difference of responses to preferred and null disparities, and average over different correlations. 
%Then take the ratio of 100-300ms to 1300-1500ms
resp_diff = mean(mean_pref,2)-mean(mean_null,2);
resp_ratio = mean(resp_diff(bin_center > 100 & bin_center <300)) / mean(resp_diff(bin_center > 1300 & bin_center <1500));

%plot response against time
subplot(2, 1, 1);
hold on;
plot(bin_center, mean_pref(:,length(unique_bin_corr)), 'k-');
plot(bin_center, mean_null(:,length(unique_bin_corr)), 'k-');
plot(bin_center, mean_pref(:,length(unique_bin_corr)) + sem_pref(:,length(unique_bin_corr)), 'k--');
plot(bin_center, mean_pref(:,length(unique_bin_corr)) - sem_pref(:,length(unique_bin_corr)), 'k--');
plot(bin_center, mean_null(:,length(unique_bin_corr)) + sem_null(:,length(unique_bin_corr)), 'k--');
plot(bin_center, mean_null(:,length(unique_bin_corr)) - sem_null(:,length(unique_bin_corr)), 'k--');
hold off;
xlabel('Time from stimulus onset (ms)');
ylabel('Response (spikes/s)');

%plot normalized response against time
max_firing = max([max(mean_pref) max(mean_null)]);
mean_pref_norm = mean_pref/max_firing;
mean_null_norm = mean_null/max_firing;
diff_norm = mean_pref_norm - mean_null_norm ;

subplot(2, 1, 2);
hold on;
plot(bin_center, mean_pref_norm(:,length(unique_bin_corr)), 'k-');
plot(bin_center, mean_null_norm(:,length(unique_bin_corr)), 'k-');
hold off;
xlabel('Time from stimulus onset (ms)');
ylabel('Normalized Response');


%------------------------------------------------------------------------
%write out all time varying variance to mean ratios to a cumulative text file, TU 01/03/02
outfile = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\Variance_analysis_summary.dat'];
printflag = 0;
if (exist(outfile, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile, 'a');
if (printflag)
    fprintf(fid, 'FILE\t VarMeanRatio1\t VarMeanRatio2\t VarMeanRatio3\t VarMeanRatio4\t VarMeanRatio5\t VarMeanRatio6\t VarMeanRatio7\t VMR200/1400\t RespRatio200/1400\t');
    fprintf(fid, '\r\n');
    printflag = 0;
end
buff = sprintf('%s\t', FILE);

for i=1:length(var_mean_ratio)
    if isnan(var_mean_ratio(i))
        buff = sprintf('%s %6s\t', buff, '--');
    else
        buff = sprintf('%s %6.4f\t', buff, var_mean_ratio(i));
    end
end

buff = sprintf('%s %6.4f\t %6.4f\t', buff, var_mean_ratio(1)/var_mean_ratio(length(var_mean_ratio)), resp_ratio);

fprintf(fid, '%s', buff);
fprintf(fid, '\r\n');
fclose(fid);
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%write out all normalized responses to a cumulative text file, TU 01/03/02
outfile2 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\NormalizedSpikeRates_Pref_summary.dat'];
printflag = 0;
if (exist(outfile2, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile2, 'a');
if (printflag)
    fprintf(fid, 'FILE\t');
    fprintf(fid, '\r\n');
    printflag = 0;
end
buff = sprintf('%s\t', FILE);

for i=length(unique_bin_corr):length(unique_bin_corr)
    for j=1:length(start_time2)
        buff = sprintf('%s %6.4f\t', buff, mean_pref_norm(j,i));
    end
end

fprintf(fid, '%s', buff);
fprintf(fid, '\r\n');
fclose(fid);

outfile3 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\NormalizedSpikeRates_Null_summary.dat'];
printflag = 0;
if (exist(outfile3, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile3, 'a');
if (printflag)
    fprintf(fid, 'FILE\t');
    fprintf(fid, '\r\n');
    printflag = 0;
end
buff = sprintf('%s\t', FILE);

for i=length(unique_bin_corr):length(unique_bin_corr)
    for j=1:length(start_time2)
        buff = sprintf('%s %6.4f\t', buff, mean_null_norm(j,i));
    end
end

fprintf(fid, '%s', buff);
fprintf(fid, '\r\n');
fclose(fid);

outfile3 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\NormalizedSpikeRates_Diff_summary.dat'];
printflag = 0;
if (exist(outfile3, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile3, 'a');
if (printflag)
    fprintf(fid, 'FILE\t');
    fprintf(fid, '\r\n');
    printflag = 0;
end
buff = sprintf('%s\t', FILE);

for i=length(unique_bin_corr):length(unique_bin_corr)
    for j=1:length(start_time2)
        buff = sprintf('%s %6.4f\t', buff, diff_norm(j,i));
    end
end

fprintf(fid, '%s', buff);
fprintf(fid, '\r\n');
fclose(fid);
diff(j,i)
%------------------------------------------------------------------------
%------------------------------------------------------------------------
%write out all variance to mean ratios for each correlation, TU 01/03/02
outfile4 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\VMR_AllBinCorr_summary.dat'];
printflag = 0;
if (exist(outfile4, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile4, 'a');
if (printflag)
    fprintf(fid, 'FILE\t BINCORR\t MEAN\t VAR\t');
    fprintf(fid, '\r\n');
    printflag = 0;
end
buff = sprintf('%s\t', FILE);

for i=1:length(unique_bin_corr)
    for j=1:length(unique_hdisp)
        buff = sprintf('%s\t %6.2f\t %6.4f\t %6.4f\t', FILE, unique_bin_corr(i) * ((unique_hdisp(j) == Pref_HDisp)*2 - 1), all_mean(i,j), all_var(i,j));
        fprintf(fid, '%s', buff);
        fprintf(fid, '\r\n');
    end
end

fclose(fid);

outfile5 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\VMR_0coh_choice.dat'];
printflag = 0;
if (exist(outfile5, 'file') == 0)    %file does not yet exist
    printflag = 1;
end
fid = fopen(outfile5, 'a');
if (printflag)
    fprintf(fid, 'FILE\t NovarMean\t NovarVar\t VarMean\t VarVar\t NovarPrefMean\t NovarPrefVar\t NovarNullMean\t NovarNullVar\t VarPrefMean\t VarPrefVar\t VarNullMean\t VarNullVar');
    fprintf(fid, '\r\n');
    printflag = 0;
end

if isnan(fixed_seed)
    buff = sprintf('%s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t %6s\t',...
        FILE, '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--', '--');     
else
    buff = sprintf('%s\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t %6.4f\t',...
        FILE, novar_mean, novar_var, var_mean, var_var, pref_novar_mean, pref_novar_var, null_novar_mean, null_novar_var, pref_var_mean, pref_var_var, null_var_mean, null_var_var);
end

fprintf(fid, '%s', buff);
fprintf(fid, '\r\n');
fclose(fid);
%------------------------------------------------------------------------
%------------------------------------------------------------------------------------------------------------------
% write out means and variances for each correlation level and choice.  TU 03/15/02
output6 = 1;
if (output6)
    outfile6 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\VMR_AllCohChoice.dat'];

    printflag = 0;
    if (exist(outfile6, 'file') == 0)    %file does not yet exist
        printflag = 1;
    end
    fid = fopen(outfile6, 'a');
    if (printflag)
        fprintf(fid, 'File SignedBinCorr VMRall VMRpref VMRnull');
        fprintf(fid, '\r\n');
        printflag = 0;
    end
        
    for i = 1:length(unique_bin_corr)
        for j = 1:length(unique_hdisp)
            sign = (unique_hdisp(j) == Pref_HDisp)*2 - 1;	%=1 if preferred disparity, -1 if null disparity
            signed_corr = unique_bin_corr(i) * sign;
            
            pref_choices = ( (choice == PREFERRED) & (binoc_corr == unique_bin_corr(i)) & (h_disp == unique_hdisp(j)) );
            null_choices = ( (choice == NULL) & (binoc_corr == unique_bin_corr(i)) & (h_disp == unique_hdisp(j)) );
            
            if ( (sum(pref_choices) > 0) & (sum(null_choices) > 0) )
                vmr_all = all_var(i,j) / all_mean(i,j);
                vmr_pref = pref_var(i,j) / pref_mean(i,j);
                vmr_null = null_var(i,j) / null_mean(i,j);
                
                outstr1 = sprintf('%s %8.4f %8.6f %8.6f %8.6f', FILE, signed_corr, vmr_all, vmr_pref, vmr_null);
                fprintf(fid, '%s', outstr1);
                fprintf(fid, '\r\n');
            end
        end
    end        
    fclose(fid);
end
%------------------------------------------------------------------------------------------------------------------
% write out noise correlation over time.  TU 09/06/02
output7 = 1;
if (output7)
    outfile7 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\NoiseCorrTime.dat'];

    printflag = 0;
    if (exist(outfile7, 'file') == 0)    %file does not yet exist
        printflag = 1;
    end
    fid = fopen(outfile7, 'a');
    if (printflag)
        fprintf(fid, 'File NoiseCorr1 NoiseCorr2 NoiseCorr3 NoiseCorr4 NoiseCorr5 NoiseCorr6 AverageNoiseCorr');
        fprintf(fid, '\r\n');
        printflag = 0;
    end
    
    outstr1 = sprintf('%s ', FILE);
    for i = 1:(length(start_time) - 1)
        outstr1 = sprintf('%s %6.4f', outstr1, Z_noise_corr(i));
    end
    outstr1 = sprintf('%s %6.4f', outstr1, average_noise_corr);
    fprintf(fid, '%s', outstr1);
    fprintf(fid, '\r\n');
    
    fclose(fid);
end

%------------------------------------------------------------------------------------------------------------------
% write out noise correlation over time for VAR/NOVAR.  TU 12/04/02
output7 = 1;
if (output7)
    outfile7 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\VarNovarNoiseCorr.dat'];

    printflag = 0;
    if (exist(outfile7, 'file') == 0)    %file does not yet exist
        printflag = 1;
    end
    fid = fopen(outfile7, 'a');
    if (printflag)
        fprintf(fid, 'File NOVAR1 NOVAR2 NOVAR3 NOVAR4 NOVAR5 NOVAR6 NOVAR7 VAR1 VAR2 VAR3 VAR4 VAR5 VAR6 VAR7');
        fprintf(fid, '\r\n');
        printflag = 0;
    end
    
    outstr1 = sprintf('%s ', FILE);
    if (isnan(fixed_seed) == 0)        
        for i = 1:(length(start_time) - 1)
            outstr1 = sprintf('%s %6.4f', outstr1, novar_noise_corr(i));
        end     
        outstr1 = sprintf('%s %6.4f', outstr1, average_novar_noise_corr);
        for i = 1:(length(start_time) - 1)
            outstr1 = sprintf('%s %6.4f', outstr1, var_noise_corr(i));
        end
        outstr1 = sprintf('%s %6.4f', outstr1, average_var_noise_corr);
    else
        for i = 1:2*(length(start_time))
            outstr1 = sprintf('%s %6s', outstr1, '--');
        end
    end
    fprintf(fid, '%s', outstr1);
    fprintf(fid, '\r\n');

    fclose(fid);
end

%------------------------------------------------------------------------------------------------------------------
% write out noise correlation over time for VAR/NOVAR.  TU 12/04/02
output8 = 1;
if (output8)
    outfile8 = [BASE_PATH 'ProtocolSpecific\DepthDiscrim\ChoiceBias_VMR_slope.dat'];

    printflag = 0;
    if (exist(outfile8, 'file') == 0)    %file does not yet exist
        printflag = 1;
    end
    fid = fopen(outfile8, 'a');
    if (printflag)
        fprintf(fid, 'File SlopeAll RsqAll PAll SlopeChoice RsqChoice PChoice');
        fprintf(fid, '\r\n');
        printflag = 0;
    end
    
    outstr1 = sprintf('%s %6.4f %6.4f %6.4f', FILE, ChoiceBias_VMR_slope, ChoiceBias_VMR_Rsq, ChoiceBias_VMR_P);

    fprintf(fid, '%s', outstr1);
    fprintf(fid, '\r\n');

    fclose(fid);
end
return;